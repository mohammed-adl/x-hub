generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- TRADING APP SCHEMA (UNCHANGED) ----------

model User {
  id                String    @id @default(uuid())
  username          String    @unique
  password          String
  email             String    @unique
  hasNotifications  Boolean   @default(true)
  passcode          String?
  passcodeExpiresAt DateTime?
  createdAt         DateTime  @default(now())

  initialBalance Decimal @default(100000)
  balance        Decimal @default(100000)
  profits        Decimal @default(0)

  holdings      Holding[]
  trades        Trade[]
  transactions  Transaction[]
  notifications Notification[]
  refreshTokens RefreshToken[]

  @@map("users")
}

model Holding {
  id        String   @id @default(uuid())
  symbol    String
  name      String?
  quantity  Decimal  @default(0)
  avgPrice  Decimal  @default(0)
  userId    String
  updatedAt DateTime @default(now()) @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, symbol])
  @@map("holdings")
}

model Trade {
  id        String     @id @default(uuid())
  symbol    String
  name      String?
  type      TRADE_TYPE
  quantity  Decimal
  price     Decimal
  profit    Decimal?
  createdAt DateTime   @default(now())
  userId    String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@map("trades")
}

model Transaction {
  id        String           @id @default(uuid())
  type      TRANSACTION_TYPE
  amount    Decimal
  createdAt DateTime         @default(now())
  userId    String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([type, createdAt])
  @@map("transactions")
}

model Notification {
  id        String            @id @default(uuid())
  title     String
  content   String
  type      NOTIFICATION_TYPE
  createdAt DateTime          @default(now())
  userId    String
  isViewed  Boolean           @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@map("notifications")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String
  createdAt DateTime @default(now())
  expiresAt DateTime

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@index([userId])
  @@map("refresh_tokens")
}

enum NOTIFICATION_TYPE {
  WELCOME
  SUCCESS
  INFO
  WARNING
  ERROR
}

enum TRANSACTION_TYPE {
  DEPOSIT
  WITHDRAWAL
}

enum TRADE_TYPE {
  BUY
  SELL
}

// ---------- X CLONE MODELS ----------

model XUser {
  id                String    @id @default(uuid())
  username          String?   @unique
  name              String
  email             String    @unique
  password          String
  bio               String?
  hasNotifications  Boolean   @default(false)
  profilePicture    String?
  coverImage        String?
  isVerified        Boolean   @default(false)
  isProtected       Boolean   @default(false)
  passcode          String?
  passcodeExpiresAt DateTime?
  createdAt         DateTime  @default(now())

  refreshTokens XRefreshToken[]
  tweets        XTweet[]

  following XFollows[] @relation("XFollowing")
  followers XFollows[] @relation("XFollowers")

  sentMessages     XMessage[] @relation("XSentMessages")
  receivedMessages XMessage[] @relation("XReceivedMessages")

  notificationsFrom XNotification[] @relation("XNotificationsFrom")
  notificationsTo   XNotification[] @relation("XNotificationsTo")

  chatsAsUser1 XChat[] @relation("XUser1Chats")
  chatsAsUser2 XChat[] @relation("XUser2Chats")

  likes   XLike[]
  Session XSession[]

  @@map("x_users")
}

model XTweet {
  id        String   @id
  content   String?
  createdAt DateTime @default(now())

  user     XUser  @relation(fields: [authorId], references: [id])
  authorId String

  tweetMedia    XTweetMedia[]
  notifications XNotification[] @relation("XTweetNotifications")
  likes         XLike[]
  retweets      XTweet[]        @relation("XTweetRetweets")
  replies       XTweet[]        @relation("XTweetReplies")

  originalTweet   XTweet? @relation("XTweetRetweets", fields: [originalTweetId], references: [id], onDelete: Cascade)
  originalTweetId String?

  parentTweet   XTweet? @relation("XTweetReplies", fields: [parentTweetId], references: [id], onDelete: Cascade)
  parentTweetId String?

  @@index([authorId])
  @@map("x_tweets")
}

model XTweetMedia {
  id        String    @id @default(uuid())
  path      String
  type      MediaType
  createdAt DateTime  @default(now())

  tweet   XTweet @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  tweetId String

  @@map("x_tweet_media")
}

model XFollows {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  following   XUser    @relation("XFollowing", fields: [followingId], references: [id])
  followingId String

  follower   XUser  @relation("XFollowers", fields: [followerId], references: [id])
  followerId String

  @@unique([followerId, followingId])
  @@index([followerId, followingId])
  @@map("x_follows")
}

model XLike {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  user   XUser  @relation(fields: [userId], references: [id])
  userId String

  tweet   XTweet? @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  tweetId String?

  @@unique([userId, tweetId])
  @@index([userId, tweetId])
  @@map("x_likes")
}

model XMessage {
  id        String   @id @default(uuid())
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  sender   XUser  @relation("XSentMessages", fields: [senderId], references: [id])
  senderId String

  receiver   XUser  @relation("XReceivedMessages", fields: [receiverId], references: [id])
  receiverId String

  chat   XChat?  @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId String?

  @@index([receiverId, createdAt])
  @@index([senderId, createdAt])
  @@index([chatId, createdAt])
  @@map("x_messages")
}

model XChat {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user1   XUser  @relation("XUser1Chats", fields: [user1Id], references: [id])
  user1Id String
  user2   XUser  @relation("XUser2Chats", fields: [user2Id], references: [id])
  user2Id String

  messages XMessage[]

  @@unique([user1Id, user2Id])
  @@map("x_chats")
}

model XNotification {
  id        String           @id @default(uuid())
  type      NotificationType
  isViewed  Boolean          @default(false)
  isSent    Boolean          @default(false)
  createdAt DateTime         @default(now())

  fromUser   XUser  @relation("XNotificationsFrom", fields: [fromUserId], references: [id])
  fromUserId String

  toUser   XUser  @relation("XNotificationsTo", fields: [toUserId], references: [id])
  toUserId String

  tweet   XTweet? @relation("XTweetNotifications", fields: [tweetId], references: [id], onDelete: Cascade)
  tweetId String?

  @@unique([tweetId, type])
  @@unique([fromUserId, tweetId, type])
  @@index([isViewed])
  @@index([type, fromUserId, toUserId])
  @@map("x_notifications")
}

model XSession {
  id        String   @id @default(uuid())
  token     String
  ip        String?
  device    String?
  createdAt DateTime @default(now())

  user   XUser  @relation(fields: [userId], references: [id])
  userId String

  @@index([userId])
  @@map("x_sessions")
}

model XRefreshToken {
  id        String   @id @default(uuid())
  token     String
  ip        String?
  device    String?
  socketId  String?
  createdAt DateTime @default(now())
  expiresAt DateTime

  user   XUser  @relation(fields: [userId], references: [id])
  userId String

  refreshTokenSockets XRefreshTokenSocket[]

  @@index([userId])
  @@map("x_refresh_tokens")
}

model XRefreshTokenSocket {
  id             String   @id @default(uuid())
  refreshTokenId String
  socketId       String
  createdAt      DateTime @default(now())

  refreshToken XRefreshToken @relation(fields: [refreshTokenId], references: [id], onDelete: Cascade)

  @@index([refreshTokenId])
  @@map("x_refresh_token_sockets")
}

enum NotificationType {
  FOLLOW
  LIKE
  REPLY
  MENTION
  RETWEET
  WELCOME
}

enum MediaType {
  IMAGE
  VIDEO
}
